substitutions:
  _TERRAFORM_DIR: 'gcp-terraform-project/environments/dev'
steps:
# Дебагинг
- name: 'gcr.io/cloud-builders/gcloud' 
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    echo "--- Current directory (where cloudbuild.yaml is executed from):"
    pwd
    echo "--- Listing contents of current directory:"
    ls -la
    echo "--- Listing contents of ./app (expected location of Dockerfile context):"
    ls -la ./app || echo "Directory ./app NOT FOUND"
    echo "--- Listing contents of /workspace (root of cloned repo):"
    ls -laR /workspace # Рекурсивний лістинг всього /workspace
    echo "--- Trying to find Dockerfile:"
    find /workspace -name Dockerfile

# 1. Ініціалізація та застосування Terraform
- name: 'gcr.io/cloud-builders/gcloud'
  id: 'Fetch SA Key from Secret Manager'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    gcloud secrets versions access latest --secret="terraform-sa-key" --project="$PROJECT_ID" > /workspace/sa-key.json

- name: 'hashicorp/terraform:1.5.7'
  id: 'Terraform Init'
  args: ['init']
  dir: 'gcp-terraform-project/environments/dev' 
  waitFor: ['Fetch SA Key from Secret Manager'] 

- name: 'hashicorp/terraform:1.5.7'
  id: 'Terraform Validate'
  args: ['validate']
  dir: 'gcp-terraform-project/environments/dev' 
  waitFor: ['Terraform Init']

- name: 'hashicorp/terraform:1.5.7'
  id: 'Terraform Plan'
  args:
  - 'plan'
  - '-out=tfplan'
  - '-var=service_account_key_path=/workspace/sa-key.json'
  dir: 'gcp-terraform-project/environments/dev' 
  waitFor: ['Terraform Validate']

- name: 'hashicorp/terraform:1.5.7'
  id: 'Terraform Apply'
  args:
  - 'apply'
  - '-auto-approve'
  - 'tfplan'
  dir: 'gcp-terraform-project/environments/dev' # Адаптуйте шлях
  waitFor: ['Terraform Plan']

# 2. Збірка Docker образу
- name: 'gcr.io/cloud-builders/docker'
  args: [
    'build',
    '-t', 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA',
    '-f', 'gcp-terraform-project/source_code_for_pipeline/app/Dockerfile', 
    'gcp-terraform-project/source_code_for_pipeline/app'                  
  ]
  id: 'Build Docker Image'


# 3. Публікація Docker образу
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA']
  id: 'Push to GCR'

# 4. Розгортання в GKE
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    gcloud container clusters get-credentials "${_GKE_CLUSTER_NAME}" \
      --region "${_GKE_LOCATION}" \
      --project "$PROJECT_ID"
    
    echo "Deploying image gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA to GKE cluster ${_GKE_CLUSTER_NAME}"
    sed "s|IMAGE_PLACEHOLDER|gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA|g" ./gcp-terraform-project/source_code_for_pipeline/kubernetes/deployment.yaml > /tmp/deployment.yaml 
    cat /tmp/deployment.yaml
    kubectl apply -f /tmp/deployment.yaml
    kubectl rollout status deployment/my-simple-app --timeout=300s
  id: 'Deploy to GKE'

images:
- 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA'

substitutions:
  _IMAGE_NAME: 'my-simple-gke-app'

options:
  logging: CLOUD_LOGGING_ONLY