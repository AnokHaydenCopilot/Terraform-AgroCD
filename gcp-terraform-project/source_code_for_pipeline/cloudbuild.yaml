steps:
# 1. Збірка Docker образу
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA', './app']
  id: 'Build Docker Image'

# 2. Публікація Docker образу в Google Container Registry (GCR)
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA']
  id: 'Push to GCR'

# 3. Отримання credentials для GKE кластера
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    gcloud container clusters get-credentials "${_GKE_CLUSTER_NAME}" \
      --region "${_GKE_LOCATION}" \
      --project "$PROJECT_ID"
  id: 'Get GKE Credentials'

# 4. Заміна плейсхолдера IMAGE_PLACEHOLDER на актуальний тег образу та розгортання в GKE
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    echo "Deploying image gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA to GKE cluster ${_GKE_CLUSTER_NAME}"
    # Створюємо тимчасову копію deployment.yaml з заміненим образом
    sed "s|IMAGE_PLACEHOLDER|gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA|g" kubernetes/deployment.yaml > /tmp/deployment.yaml
    cat /tmp/deployment.yaml # Для дебагу в логах Cloud Build
    kubectl apply -f /tmp/deployment.yaml
    # Очікуємо на завершення розгортання
    kubectl rollout status deployment/my-simple-app --timeout=300s
  id: 'Deploy to GKE'

# Список образів, які будуть доступні після збірки
images:
- 'gcr.io/$PROJECT_ID/${_IMAGE_NAME}:$SHORT_SHA'

# Заміни (substitutions), які можна передавати в Cloud Build
# Ці значення будуть автоматично передані з Terraform тригера
# _GKE_CLUSTER_NAME, _GKE_LOCATION, _IMAGE_NAME
substitutions:
  _IMAGE_NAME: 'my-simple-gke-app' # Ім'я вашого образу (можна змінити)
  # _GKE_CLUSTER_NAME та _GKE_LOCATION будуть визначені в Terraform

options:
  logging: CLOUD_LOGGING_ONLY # Зберігати логи тільки в Cloud Logging
  # machineType: 'E2_HIGHCPU_8' # Можна вказати потужнішу машину для збірки, якщо потрібно